{"version":3,"file":"static/js/940.6b1cdc0e.chunk.js","mappings":"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","sources":["components/CastList/CastListitem/CastListItem.module.css","components/CastList/CastListitem/CastListItem.jsx","components/CastList/CastList.jsx","services/tmdb-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import PropTypes from 'prop-types';\nimport css from './CastListItem.module.css';\n\nconst CastListItem = ({ profilePath, originalName, name }) => {\n  return (\n    <li className={css.CastListItem}>\n      <img\n        width=\"200px\"\n        height=\"300px\"\n        src={\n          profilePath\n            ? `https://image.tmdb.org/t/p/w300${profilePath}`\n            : `https://fakeimg.pl/600x400?text=Image+Not+Available`\n        }\n        alt={originalName}\n      />\n      <p>{name}</p>\n    </li>\n  );\n};\n\nCastListItem.propTypes = {\n  profilePath: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  originalName: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default CastListItem;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/tmdb-api';\nimport { Loader } from 'components/Loader/Loader';\nimport CastListItem from './CastListitem/CastListItem';\n\nconst CastList = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const castData = await fetchMovieCast(movieId);\n        setCast(castData);\n      } catch (error) {\n        console.error('Error fetching cast data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getCast();\n  }, [movieId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <ul>\n      {cast.map(actor => (\n        <CastListItem\n          key={actor.id}\n          profilePath={actor.profile_path}\n          originalName={actor.original_name}\n          name={actor.name}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default CastList;\n","import axios from 'axios';\n\nconst API_KEY = '526b650b7a87d81fa6582d5f1ca94e82';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\n// Fetch Trening Movies\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day`);\n  return response.data.results;\n};\n\n// Fetch Movies by Query\nexport const fetchMovieQuery = async movieName => {\n  const response = await axios.get(`search/movie?query=${movieName}`);\n  return response.data.results;\n};\n\n// Fetch Movie Details\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}`);\n  return response.data;\n};\n\n// Fetch Movie Cast\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?`);\n  return response.data.cast;\n};\n\n// Fetch Movie Reviews\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews?`);\n  return response.data.results;\n};\n"],"names":["_ref","profilePath","originalName","name","_jsxs","className","css","children","_jsx","width","height","src","concat","alt","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","useEffect","getCast","_asyncToGenerator","_regeneratorRuntime","_callee","castData","_context","prev","next","fetchMovieCast","sent","t0","console","error","finish","stop","apply","arguments","Loader","map","actor","CastListItem","profile_path","original_name","id","axios","api_key","fetchTrendingMovies","response","abrupt","data","results","fetchMovieQuery","_ref2","_callee2","movieName","_context2","_x","fetchMovieDetails","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","fetchMovieReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}